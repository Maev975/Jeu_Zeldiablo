@startuml


class Entree {
    +Entree (int dx, int dy)
    +String toString()
}


class Entite {
    protected int x
    protected int y
    protected int vie
    protected int freeze
    + Entite(int dx, int dy)
    + boolean etrePresent(int dx, int dy)
    + boolean etreACote(Entite e)
    + boolean etreMort()
    + boolean etreFreeze()
    + void subirAttaque(int degat)
    + void attaquer(int d, int f, Entite e)
    + void subirFreeze (int f)
    + int getX()
    + int getY()
    + void setY(int yn)
    + void setX(int xn)
    + int getVie()
    + int getFreeze()
    + int setFreeze(int f)
}

class LabyDessin implements DessinJeu {
    + static final int TAILLE
    + void dessinerJeu(Jeu jeu, Canvas canvas)
}

class LabyJeu implements Jeu {
    - Labyrinthe labyrinthe
    + LabyJeu(String nom)
    + void update(double deltaTime, Clavier clavier)
    + void init()
    + boolean etreFini()
    + Labyrinthe getLabyrinthe()
}

'class Main {
'    + static void main(String[] args)
'}

class Labyrinthe {
    + static final char MUR
    + static final char PJ
    + static final char MONSTRE
    + static final char AMULETTE
    + static final char VIDE
    + static final String HAUT
    + static final String BAS
    + static final String GAUCHE
    + static final String DROITE
    + static final String ESPACE
    + static final String[] ACTIONS
    public static final String[]
    public Perso pj
    public Monstre monstre
    public Entree entree
    public Amulette amulette
    public List<Entite> lst_entite
    public boolean[][] murs
    - Random random
    + static int[] getSuivant(int x, int y, String action)
    + Labyrinthe(String nom)
    + realiserEtape(String action)
    + void deplacerEntite(String action,Entite e)
    + boolean etreFini()
    + int getLengthY()
    + int getLength()
    + boolean getMur(int x, int y)
}

'class MainLaby {
'    + static void main(String[] args)
'}

class Monstre {
    + Monstre(int dx, int dy)
}

class Perso {
    -boolean amulette
    + Perso(int dx, int dy)
    +void recupererAmuette()
    +void jeterAmulette()
    +boolean avoirAmulette()
}

'class Clavier {
'    public boolean haut
'    public boolean bas
'    public boolean gauche
'    public boolean droite
'    public boolean espace
'    public boolean hautAppuye
'    public boolean basAppuye
'    public boolean gaucheAppuye
'    public boolean droiteAppuye
'    public boolean espaceAppuye
'    + void appuyerTouche(KeyEvent event)
'    + void relacherTouche(KeyEvent event)
'}

interface DessinJeu {
    + void dessinerJeu(Jeu jeu, Canvas canvas)
}

'class FrameStats {
'    private long frameCount
'    private double meanFrameInterval
'    private final ReadOnlyStringWrapper text
'    + long getFrameCount()
'    + double getMeanFrameInterval()
'    + void addFrame(long frameDurationNanos)
'    + String getText()
'    + ReadOnlyStringProperty textProperty()
'    + String toString()
'}

'interface Jeu {
'    + void update(double secondes, Clavier clavier)
'    + void init()
'    + boolean etreFini()
'}

'class MoteurJeu {
'    private static double FPS
'    private static double dureeFPS
'    private static double WIDTH
'    private static double HEIGHT
'    private final FrameStats frameStats
'    private static Jeu jeu
'    private static DessinJeu dessin
'    Clavier controle
'    + static void launch(Jeu jeu, DessinJeu dessin)
'    + static void setFPS(int FPSSouhaitees)
'    + static void setTaille(double width, double height)
'    + void start(Stage primaryStage)
'    - void startAnimation(Canvas canvas)
'}

class Amulette{
 +Entree (int dx, int dy)
 +String toString()

}

Entite <|-- Monstre
Entite <|-- Perso
Entite <|-- Entree
Entite <|-- Amulette
LabyJeu --> Labyrinthe
Labyrinthe --> Perso
Labyrinthe --> Monstre
'DessinJeu <|.. LabyDessin
'Jeu <|.. LabyJeu
'LabyJeu --> Clavier
'MoteurJeu --> FrameStats
'MoteurJeu --> Clavier
'MoteurJeu --> Jeu
'MoteurJeu --> DessinJeu

@enduml
